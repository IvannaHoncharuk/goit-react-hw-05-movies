{"version":3,"file":"static/js/779.4e6003ea.chunk.js","mappings":"8LAYaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,+KClBWC,EAAaT,EAAAA,GAAAA,IAAH,8FAMVU,EAAUV,EAAAA,GAAAA,EAAH,8CAIPW,EAASX,EAAAA,GAAAA,KAAH,iLAKG,YAAiB,IAAdY,EAAa,EAAbA,OACrB,OAAIA,EAAS,EACJ,OAELA,GAAU,GAAKA,GAAU,EACpB,OAEF,MACR,IAEQ,gBAAGA,EAAH,EAAGA,OAAH,OAAiBA,GAAU,GAAKA,GAAU,EAAI,QAAU,OAAxD,I,SCgCX,EArDgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAQA,OANAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,0FACCD,EADD,UACkBE,EAAAA,EAAAA,IAAqBN,GADvC,4EAAD,EAGD,GAAE,CAACA,KAGF,SAACd,EAAA,EAAD,WACIiB,EAAQI,OAAS,GACjB,uCAEA,SAACrB,EAAA,EAAD,CAAKsB,GAAG,KAAKC,QAAQ,OAAOC,cAAc,SAASC,QAAS,EAA5D,SACGR,EAAQS,KACP,YAMO,IALLC,EAKI,EALJA,GACAC,EAII,EAJJA,OACkBf,EAGd,EAHJgB,eAAkBhB,OAClBiB,EAEI,EAFJA,QACAC,EACI,EADJA,WAEA,OACE,UAACrB,EAAD,YACE,0BACE,mCADF,IACkBkB,MAElB,0BACE,mCAAe,KACf,SAAChB,EAAD,CAAQC,OAAQA,EAAhB,SACGA,GAAkB,kBAGvB,wBACE,sCAEF,SAACF,EAAD,UAAUmB,KACV,0BACE,wCAAoB,IACnB,IAAIE,KAAKD,GAAYE,mBAAmB,cAhB5BN,EAoBpB,OAMZ,C,mMCvDDO,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAgB,mCAAG,qGACPF,EAAAA,EAAAA,GAAM,sBAAuB,CAClDG,OAAQ,CACNC,QAASH,KAHiB,cACxBI,EADwB,yBAOvBA,EAASC,KAAKC,SAPS,2CAAH,qDAUhBC,EAAoB,mCAAG,WAAMC,GAAN,wFACXT,EAAAA,EAAAA,GAAM,gBAAiB,CAC5CG,OAAQ,CACNC,QAASH,EACTS,eAAe,EACfD,MAAAA,KAL8B,cAC5BJ,EAD4B,yBAS3BA,EAASC,KAAKC,SATa,2CAAH,sDAYpBI,EAAoB,mCAAG,WAAM/B,GAAN,wFACXoB,EAAAA,EAAAA,GAAM,UAAD,OAAWpB,GAAW,CAChDuB,OAAQ,CACNC,QAASH,KAHqB,cAC5BI,EAD4B,yBAO3BA,EAASC,MAPkB,2CAAH,sDAUpBM,EAAiB,mCAAG,WAAMhC,GAAN,wFACRoB,EAAAA,EAAAA,GAAM,UAAD,OAAWpB,EAAX,YAA8B,CACxDuB,OAAQ,CACNC,QAASH,KAHkB,cACzBI,EADyB,yBAOxBA,EAASC,MAPe,2CAAH,sDAUjBpB,EAAoB,mCAAG,WAAMN,GAAN,wFACXoB,EAAAA,EAAAA,GAAM,UAAD,OAAWpB,EAAX,YAA8B,CACxDuB,OAAQ,CACNC,QAASH,KAHqB,cAC5BI,EAD4B,yBAO3BA,EAASC,MAPkB,2CAAH,qD","sources":["components/Box.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  grid,\n  background,\n  border,\n  position\n);","import styled from 'styled-components';\n\nexport const ContentBox = styled.div`\n  background-color: wheat;\n  border-radius: 10px;\n  padding: 20px;\n`;\n\nexport const Content = styled.p`\n  text-indent: 50px;\n`;\n\nexport const Rating = styled.span`\n  display: inline-block;\n  min-width: 30px;\n  text-align: center;\n  padding: 5px;\n  background-color: ${({ rating }) => {\n    if (rating > 6) {\n      return '#6c3';\n    }\n    if (rating >= 4 && rating <= 6) {\n      return '#fc3';\n    }\n    return '#f00';\n  }};\n  border-radius: 10px;\n  color: ${({ rating }) => (rating >= 4 && rating <= 6 ? 'black' : 'white')};\n  `;","import { Box } from 'components/Box';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFetchMovieReviews } from 'services/api';\nimport { ContentBox, Content, Rating } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      setReviews(await getFetchMovieReviews(movieId));\n    })();\n  }, [movieId]);\n\n  return (\n    <Box>\n      {!reviews.length > 0 ? (\n        <p>No reviews</p>\n      ) : (\n        <Box as=\"ul\" display=\"flex\" flexDirection=\"column\" gridGap={3}>\n          {reviews.map(\n            ({\n              id,\n              author,\n              author_details: { rating },\n              content,\n              created_at,\n            }) => {\n              return (\n                <ContentBox key={id}>\n                  <p>\n                    <b>Author:</b> {author}\n                  </p>\n                  <p>\n                    <b>Rating:</b>{' '}\n                    <Rating rating={rating}>\n                      {rating ? rating : 'Not rated'}\n                    </Rating>\n                  </p>\n                  <p>\n                    <b>Review:</b>\n                  </p>\n                  <Content>{content}</Content>\n                  <p>\n                    <b>Created at: </b>{' '}\n                    {new Date(created_at).toLocaleDateString('en-US')}\n                  </p>\n                </ContentBox>\n              );\n            }\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Reviews;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = 'e1ec3202cd0dd1da652adfbc8dc32822';\n\nexport const getFetchTrending = async () => {\n  const response = await axios('/trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getFetchSearchMovies = async query => {\n  const response = await axios('/search/movie', {\n    params: {\n      api_key: KEY,\n      include_adult: false,\n      query,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const getFetchMovieDetails = async movieId => {\n  const response = await axios(`/movie/${movieId}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getFetchMovieCast = async movieId => {\n  const response = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};\n\nexport const getFetchMovieReviews = async movieId => {\n  const response = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return response.data;\n};"],"names":["Box","styled","color","space","layout","flexbox","grid","background","border","position","ContentBox","Content","Rating","rating","movieId","useParams","useState","reviews","setReviews","useEffect","getFetchMovieReviews","length","as","display","flexDirection","gridGap","map","id","author","author_details","content","created_at","Date","toLocaleDateString","axios","KEY","getFetchTrending","params","api_key","response","data","results","getFetchSearchMovies","query","include_adult","getFetchMovieDetails","getFetchMovieCast"],"sourceRoot":""}